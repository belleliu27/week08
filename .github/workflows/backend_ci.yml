name: Backend CI â€“ test, build, push

on:
  workflow_dispatch:
  pull_request:
    branches: [dev, main]
    paths: ["backend/**", ".github/workflows/backend_ci.yml"]
  push:
    branches: [dev, main]
    paths: ["backend/**", ".github/workflows/backend_ci.yml"]

permissions:
  contents: read

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          {
            POSTGRES_USER: postgres,
            POSTGRES_PASSWORD: postgres,
            POSTGRES_DB: products,
          }
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
        ports: ["5432:5432"]
      order_db:
        image: postgres:15
        env:
          {
            POSTGRES_USER: postgres,
            POSTGRES_PASSWORD: postgres,
            POSTGRES_DB: orders,
          }
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
        ports: ["5433:5432"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.10", cache: "pip" }
      - name: Install deps
        run: |
          pip install --upgrade pip pytest httpx
          for req in backend/*/requirements.txt; do pip install -r "$req"; done
      - name: Test product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest backend/product_service/tests -q
      - name: Test order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest backend/order_service/tests -q

  build_push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Docker login to ACR (no az login)
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ env.ACR_LOGIN_SERVER }} \
            -u "${{ secrets.ACR_USERNAME }}" --password-stdin

      - name: Build+push product_service (SHA + latest)
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ./backend/product_service
          docker push  ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          docker tag   ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/product_service:latest
          docker push  ${{ env.ACR_LOGIN_SERVER }}/product_service:latest

      - name: Build+push order_service (SHA + latest)
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ./backend/order_service
          docker push  ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}
          docker tag   ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/order_service:latest
          docker push  ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

      - name: Docker logout
        if: always()
        run: docker logout ${{ env.ACR_LOGIN_SERVER }}
